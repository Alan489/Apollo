@page "/Unauthorized/ChangePassword/{reason}"
@using Apollo2.Sys
@using Apollo2.Shared.Sys
@using Apollo2.Shared.Sys.Authentication
@using Apollo2.Shared.Sys.User
@using System.Timers;
@using System.Text.RegularExpressions
@using System.Net
@inject NavigationManager _navi
@inject HttpClient _http
@inject SystemInformation _sys

<div class="ROOT">
 <div class="Header">
  <div class="HeaderLeft">
  </div>
  <div class="HeaderCenter">
   APOLLO CAD
  </div>
  <div class="HeaderRight">
   <div class="HeaderClock">
    @time
   </div>

  </div>
 </div>

 <div class="BODY">
  <div class="changePasswordBox">
   <div class="changePasswordForm">
    <div class="System">
     <div class="LABEL">
      System Address
     </div>
     <div class="INPUT">
      <input type="text" @bind-value="sys" />
     </div>
    </div>
    <div class="Username">
     <div class="LABEL">
      Username
     </div>
     <div class="INPUT">
      <input type="text" @bind-value="username" />
     </div>
    </div>
    <div class="CurrentPassword">
     <div class="LABEL">
      Current Password
     </div>
     <div class="INPUT">
      <input type="password" @bind-value="password" />
     </div>
    </div>
    <div class="NewPassword">
     <div class="LABEL">
      New Password
     </div>
     <div class="INPUT">
      <input type="password" @bind-value="nPassword" />
     </div>
    </div>
    <div class="NewPassword">
     <div class="LABEL">
      Confirm Password
     </div>
     <div class="INPUT">
      <input type="password" @bind-value="nPasswordConfirm" />
     </div>
    </div>
    <button class="CONFIRM" @onclick="go">Change Password</button>
   </div>
   <button class="RETURN" @onclick="backToLogin">Back to Login</button>
  </div>
  <div class="Message">
   @message
  </div>
 </div>

</div>

@code {
 [Parameter]
 public string reason { get; set; }

 private string sys = "";

 private string username = "";
 private string password = "";

 private string nPassword = "";
 private string nPasswordConfirm = "";

 private string message = "";
 private string messageClasses = "logonReturnMessage";

 bool debounce = false;

 private string time = DateTime.Now.ToString("HH:mm:ss");

 protected override async Task OnParametersSetAsync()
 {
  if (SystemInformation.token != null)
  {
   username = SystemInformation.token.username ?? "";
   password = SystemInformation.token.hash ?? "";
   sys = SystemInformation.sysURL ?? "";
  }

  if (reason == "expired")
  {
   message = "Your password has expired and must be changed.";
  }

  StateHasChanged();
  return;
 }

 private void clock(Object? source, ElapsedEventArgs? e)
 {
  time = DateTime.Now.ToString("HH:mm:ss");
  this.StateHasChanged();
 }

 protected override void OnInitialized()
 {
  _navi.LocationChanged += LocationChanged;
  SysTimers.secondTimer.Elapsed += clock;

  base.OnInitialized();
 }

 void LocationChanged(object? sender, LocationChangedEventArgs e)
 {
  Dispose();
 }

 void Dispose()
 {
  _navi.LocationChanged -= LocationChanged;
  SysTimers.secondTimer.Elapsed -= clock;
 }

 private void backToLogin()
 {
  _navi.NavigateTo("/");
 }

 // API/Sys/User/User/changePassword

 private async Task go()
 {
  if (debounce) return;
  debounce = true;

  string tSys = sys;
  string tUser = username;
  string tOldPass = password;
  string tNewPass = nPassword;
  string tNewPassC = nPasswordConfirm;

  if (string.IsNullOrEmpty(tSys))
  {
   message = "System Address cannot be left blank.";
   messageClasses = "logonReturnMessage logonReturnMessageError";
   StateHasChanged();
   debounce = false;
   return;
  }

  Regex mustmatch = new Regex("^([a-z0-9]+((\\.[a-z0-9]+)?)+)(:[0-9]+)?$");
  Match match = mustmatch.Match(tSys);

  if (!match.Success)
  {
   message = "System Address: Please provide a valid URL.";
   messageClasses = "logonReturnMessage logonReturnMessageError";
   StateHasChanged();
   debounce = false;
   return;
  }

  if (string.IsNullOrEmpty(tUser))
  {
   message = "Username cannot be left blank.";
   messageClasses = "logonReturnMessage logonReturnMessageError";
   StateHasChanged();
   debounce = false;
   return;
  }

  if (string.IsNullOrEmpty(tOldPass))
  {
   message = "Current password cannot be left blank.";
   messageClasses = "logonReturnMessage logonReturnMessageError";
   StateHasChanged();
   debounce = false;
   return;
  }

  if (string.IsNullOrEmpty(tNewPass))
  {
   message = "New password cannot be left blank.";
   messageClasses = "logonReturnMessage logonReturnMessageError";
   StateHasChanged();
   debounce = false;
   return;
  }

  if (string.IsNullOrEmpty(tNewPass))
  {
   message = "Confirm password cannot be left blank.";
   messageClasses = "logonReturnMessage logonReturnMessageError";
   StateHasChanged();
   debounce = false;
   return;
  }

  if (tNewPass != tNewPassC)
  {
   message = "Passwords do not match.";
   messageClasses = "logonReturnMessage logonReturnMessageError";
   StateHasChanged();
   debounce = false;
   return;
  }

  string sysTemp = "https://" + tSys;


  Token token = new Token(tUser, tOldPass);
  ChangePasswordRequest cpr = new ChangePasswordRequest(token, nPassword);

  message = $"Changing pasword for {tUser}@{tSys}";
  messageClasses = "logonReturnMessage";
  StateHasChanged();

  UserLoginResponse? ulr;
  try
  {
   var resp = await _http.PostAsJsonAsync<ChangePasswordRequest>(sysTemp + "/API/Sys/User/User/changePassword", cpr);

   ulr = await resp.Content.ReadFromJsonAsync<UserLoginResponse>();

   if (resp.StatusCode == HttpStatusCode.Unauthorized || ulr == null || ulr.successful == false)
   {
    if (ulr == null)
     message = "An unknown error occured. Is the System Address correct?";
    else
     message = ulr.errorMessage ?? "An unknown error occured. Is the System Address correct?";
    messageClasses = "logonReturnMessage logonReturnMessageError";
    StateHasChanged();
    debounce = false;
    return;
   }

   SystemInformation.sysURL = null;
   SystemInformation.token = null;
   SystemInformation.session = null;
   await _sys.logout();

   _navi.NavigateTo("/");
  }

  catch (Exception c)
  {
   message = "Unable to connect to server. Is the System Address correct?";
   messageClasses = "logonReturnMessage logonReturnMessageError";
   debounce = false;
   StateHasChanged();
  }
  

 }


}
